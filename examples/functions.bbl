
library

/@@
AND(left:string, right:string, ERR?:lineref): string
@/
AND(left:string, right:string, ERR?:lineref): string

/@@
#### Syntax
\`ASC(string{,ERR:lineref})\`

#### Description

The **ASC()** function returns the ASCII numeric value of the first character in a string.
@/
ASC(param:string, ERR?:lineref): int

/@@
\`CHR(int{,ERR:lineref})\`

The CHR() function returns the ASCII value of an integer.
@/
CHR(param:int, ERR?:lineref): string

/@@
The NULL() function returns a Java null value. It is typically used to check for a null value returned from a Java function.
@/
NULL():null

/@@
\`STR(objexpr{:mask}{,ERR:lineref})\`
 
In BBj, the STR() function accepts arguments of any type. If the argument evaluates to a number, STR(num) is used, otherwise STR(str) is used.
BBj STR() function supports the 'U' mask character.
@/
STR(objexpr:string, ERR?:lineref): string

/@@
\`ABS(num{, ERR:lineref})\`

The ABS() function returns the absolute value of its numeric argument.
@/
ABS(param:num, ERR?:lineref): num

/@@
\`ADJN(val{, ERR:lineref})\`

The ADJN() function returns an 8-byte binary string suitable for string comparisons of numeric values.
@/
ADJN():string

/@@
\`ATH(string{, ERR: lineref})\`

The ATH() function converts a human-readable hexadecimal string to the internal form.
@/
ATH(param:string, ERR?:lineref): string

/@@
\`ATN(num{, precis}{, ERR:lineref})\`

The ATN() function returns the arctangent of num. The result is in radians and is in the range -pi/2 to pi/2.
@/
ATN(param:num, param: num, ERR?:lineref): num

/@@
\`BIN(intA, intB{, ERR:lineref})\`

The BIN() function converts a decimal into a binary string.
@/
BIN(param:int, param: int, ERR?:lineref): string

/@@
\`BSZ(int{, ERR:lineref})\`

The BSZ() function() prevents an ERROR message from being issued and always returns a 0
@/
BSZ(param: int, ERR?:lineref): int

/@@
\`CAST(type, object{, ERR:lineref})\`

In BBj 6.0 and higher, the CAST() function takes a type name and an object and returns an object of the provided type.
@/
CAST(param:object, param: object, ERR?:lineref): object

/@@
\`CHANOPT(channelno{, ERR:lineref})\`

The CHANOPT() function returns the current settings that are accessible using the CHANOPT verb for the specified channel.
@/
CHANOPT(param:int, ERR?:lineref): object

/@@
\`CLIENTENV(str{,IND=int}{,ERR:lineref})\`

In BBj 4.0 and higher, the CLIENTENV() function returns the value of a specified operating system environment variable from the client side of a thin client session.
@/
CLIENTENV(param: string, param: int, ERR?:lineref): int

/@@
\`CLIPISFORMAT({fmt[, ERR=lineref]})\`

The CLIPISFORMAT() function checks the availability of clipboard formats for data to be copied to the application.
@/
CLIPISFORMAT(param: int, ERR?:lineref): int

/@@
\`CLIPREGFORMAT(name$[, ERR:lineref])\`

The CLIPREGFORMAT() function is used to register clipboard formats, which must be defined before data can be placed on the clipboard.
@/
CLIPREGFORMAT(param: string, ERR?:lineref): int

/@@
\`CLIPTOSTR(fmt[,ERR:lineref])\`

The CLIPTOSTR() function returns a string in an fmt-parameter-specified clipboard format that can be processed by the application.
@/
CLIPTOSTR(param: int, ERR?:lineref): string

/@@
\`COS(num{,precis{,ERR:lineref}})\`

The COS() function returns the cosine of the specified value. The result will be in the range -1 to 1.
@/
COS(param: num, param: int, ERR?:lineref): num

/@@
\`CPL(stringA{,stringB{,ERR:lineref}})\`

The CPL() function returns a string containing the internal compiled format of the supplied command line.
@/
CPL(param: string, param: string, ERR?:lineref): string

/@@
\`CRC(stringA{,stringB}{,ERR=lineref})\`

The CRC() function returns a 2-byte string containing a special checksum of stringA. If stringB is given, it must be 2 bytes long and provide a "seed" for the checksum
@/
CRC(param: string, param: string, ERR?:lineref): string

/@@
\`CRC16(str,seed{,ERR=lineref})\`

The CRC16() function implements the CCITT CRC-16 function. See the CRC() function for additional information.
@/
CRC16(param: string, param: string, ERR?:lineref): string

/@@
\`CTRL(chan{,control_id{,function{,context_id}}}{,ERR=lineref})\`

The CTRL() function reports on the status of selected items on a GUI device and returns a string value.
@/
CTRL(param: int, param: int, param: int, param: int, ERR?:lineref): string

/@@
\`CVS(string,int{,ERR=lineref})\`

The CVS() function modifies a given string by the value of int from the table below:
0-Do nothing
1-Strip leading spaces
2-Strip traling spaces
4-Convert characters to uppercase
8-Convert characters to lowercase
16-Convert nonprintable characters to spaces
32-Replace multiple spaces with a single space
64-Repace "," and "." characters with values as specified in OPTS(see SETOPTS)
@/
CVS(param: string, param: int, ERR?:lineref): string

/@@
\`CVT(unit_value,conversion_type{,ERR=lineref})\`

The CVT() function converts units between pixel, character, and semicharacter formats.
@/
CVT(param: int, param: int, ERR?:lineref): char

/@@
\`DATE(num1{,num2}{:str}{,ERR=lineref})\`

The DATE() function takes a Julian date and the optional time-of-day and formats it into a more familiar calendar date and time string.
@/
DATE(param: num, param: num, param: string): string

/@@
\`DEC(string{,ERR=lineref})\`

The DEC() function converts a binary string argument into a numeric value. The string argument is treated as a signed binary integer.
@/
DEC(param: string, ERR?:lineref): num

/@@
\`DECRYPT(string{,password}{,MODE=string}{,ERR=lineref})\`

In PRO/5 5.0 and BBj 4.0 and higher, DECRYPT() decrypts the specified string that was encrypted with ENCRYPT(). 
Attempting to decrypt with the wrong key or algorithm will usually cause meaningless data to be returned
@/
DECRYPT(param: string, param: param, ERR?:lineref): string

/@@
\`DIMS(arrayname{,ERR=lineref})\`

The DIMS() function returns the dimensions of an array.
@/
DIMS(param: string, ERR?:lineref): string

/@@
\`DIR(disk{,ERR=lineref})\`

The DIR() function returns the default directory for the specified disk.
@/
DIR(param: string, ERR?:lineref): string

/@@
\`DSK(disk{,ERR=lineref})\`

The DSK() function determines the current default disk drive as well as which drives are configured.
@/
DSK(param: string, ERR?:lineref): string

/@@
\`ENCRYPT(string{,password}(,MODE=string){,ERR=lineref})\`

In PRO/5 5.0 and BBj 4.0 and higher, the ENCRYPT() encrypts the specified string and returns an encrypted string. 
Note that the encrypted string may be longer than the specified string.
@/
ENCRYPT(param: string, param: string, ERR?:lineref): string

/@@
\`ENV(str{,IND=int}{,ERR=lineref})\`

In BBj 4.0 and higher, the ENV() function returns the value of a specified operating system environment variable
@/
ENV(param: string, param: int, ERR?:lineref): string

/@@
\`EPT(num{,ERR=lineref})\`

The EPT() function returns the order of magnitude of num (the exponent of 10).
@/
EPT(param: num, ERR?:lineref): num

/@@
\`ERR(int{,int...})\`

The ERR() function does one of the following:
1-Returns the most recent error value as an integer in the 0 to 255 range.
2-Uses an argument list to return a position with the same value as the error value.
@/
ERR(param: int): int

/@@
\`ERRMES(int{,str}{,ERR=lineref})\`

The ERRMES() function returns the error message associated with a given error code provided by the int parameter.
@/
ERRMES(param: int, param: string, ERR?:lineref): string

/@@
\`
(1)FATTR(string{,ERR=lineref})
(2)FATTR(string,""{,ERR=lineref})
   FATTR(string,"",""{,ERR=lineref})
(3)FATTR(string,field_name,attribute_name{,ERR=lineref})
(4)FATTR(string,field_name{,ERR=lineref})
   FATTR(string,field_name,""{,ERR=lineref})
\`

(1)-Returns a string template definition.
(2)-Returns the names of fields contained in the defined string template. Each field name is delimited with a line-feed character ($0A$), including a line-feed character at the end of the string.
(3)-Returns the value of a user-defined attribute of a specified field name in the defined string template.
(4)-Returns encoded information about a specified field in the defined string template.
@/
FATTR(param: string, param: string, param: string, ERR?:lineref): string

/@@
\`FBIN(numeric{,ERR=lineref})\`

The FBIN() function returns an 8-byte string containing the equivalent of the numeric argument in IEEE standard, 64-bit, floating point format.
@/
FBIN(param: num, ERR?:lineref): string

/@@
\`FDEC(string{,ERR=lineref})\`

The FDEC() function accepts an 8-byte floating point format and returns its decimal numeric equivalent.
@/
FDEC(param: string, ERR?:lineref): num

/@@
\`FID(channelno{,ERR=lineref})\`

The FID() function returns a string describing the attributes of the file currently OPENed on channelno. 
If channelno was OPENed with an alias and resulted in opening a PRO/5 device, FID() returns only the alias name and may be a string from one to six characters long.
@/
FID(param: int, ERR?:lineref): string

/@@
\`
FIELD(strname,str{,int}{,ERR=lineref})
NFIELD(strname,str{,int}{,ERR=lineref})
FIELD(strname{,ERR=lineref})
\`

The FIELD() and NFIELD() functions allow access to data stored in a string template. To access character (string) data, use FIELD(). To access numeric data, use NFIELD().
@/
FIELD(param: string, param: string, param: int, ERR?:lineref): string

/@@
\`FILEOPEN(prompt,path,name,ext[,filters[,mode[,MODE="CLIENT,EXISTS=option,RESOLVE=option,STYLE=name"]]])\`

The FILEOPEN function activates the standard File Open dialog.
@/
FILEOPEN(prompt: string, path: string, name: string, ext: string, filters?: string, mode?: int, MODE?!: string): string 

/@@
\`FILEOPT(str{,ERR=lineref})\`

The FILEOPT() function returns the settings given in the FILEOPT verb.
@/
FILEOPT(param: string, ERR?:lineref): string

/@@
\`FILESAVE(prompt,path,name,ext[,filters[,mode[,MODE="CLIENT,STYLE=name,EXISTS=option"]]])\`

The FILESAVE function activates the standard File Save dialog.
@/
FILESAVE(prompt: string, path: string, name: string, ext: string, filters?: string, mode?: int, MODE?!: string): string

/@@
\`FILL(int{,string}{,ERR=lineref})\`

The FILL() function generates repeating strings on the fly without the need for a DIM statement.
@/
FILL(param: int, param: string, ERR?:lineref): string

/@@
\`FIN(channelno{,ERR=lineref})\`

The FIN() function returns file information associated with specified channel and the current status and system-specific information.
@/
FIN(param: int, ERR?:lineref): int

/@@
\`
FNnumname(expr,...)
FNstrname(expr,...)
FNobjname(expr,...)
\`

Used with the DEF verb, the FN() function executes functions defined by the user.
@/
FNnum(param: num): string
FNstring(param: string): string
FNobject(param: object): string

/@@
\`FPT(num{,ERR=lineref})\`

The FPT() function returns the fractional part of the numeric expression. The result has the same sign as the argument.
@/
FPT(param: num, ERR?:lineref): num

/@@
\`GAP(string{,ERR=lineref})\`

The GAP() function returns its string argument with each byte in odd parity by complementing the high-order bit of any byte containing an even number of 1 bits.
@/
GAP(param: string, ERR?:lineref): string

/@@
\`HSA(disk{,ERR=lineref})\`

The HSA() function returns an integer that identifies the highest sector addressable for a disk.
@/
HSA(param: string, ERR?:lineref): int

/@@
\`HSH(stringA{,stringB}{,ERR=lineref})\`

The HSH() function is similar to the CRC() function, except with a different algorithm (see the CRC() function).
@/
HSH(param: string, param: string, ERR?:lineref): string

/@@
\`HTA(string{,ERR=lineref})\`

The HTA() function converts a hexadecimal string to a human-readable ASCII string. The result is always twice the length of the argument.
@/
HTA(param: string, ERR?:lineref): string

/@@
\`IFF(num_expr,true_expr,false_expr)\`

The IFF() function tests a specified numeric expression and returns one of two things, based on whether the expression evaluates as true (non-zero) or false (zero).
@/
IFF(param: num, param: any, param: any): any

/@@
\`IND(channelno{,ERR=lineref}{,END=lineref})\`

The IND() function returns the pointer of the current record on channelno.
@/
IND(param: int, ERR?:lineref, END?:lineref): int

/@@
\`INFO(int,int{,ERR=lineref})\`

The INFO() function returns system information strings.
@/
INFO(param: int, param: int, ERR?:lineref): string

/@@
\`INT(num{,ERR=lineref})\`

The INT() function converts a numeric argument, removing any fractional digits and truncating all digits to the right of the decimal point.
@/
INT(param: num, ERR?:lineref): int

/@@
\`IOR(string,string{,ERR=lineref})\`

The IOR() function inclusive ORs the bits of the two string arguments and returns a string. Both string arguments must be the same length.
@/
IOR(param: string, param: string, ERR?:lineref): string

/@@
\`JUL(year,month,day{,ERR=lineref})\`

The JUL() function returns the Julian day number for a given date.
@/
JUL(param: int, param: int, param: int, ERR?:lineref): int

/@@
\`
1-KEY(channelno{,ERR=lineref}{,END=lineref}{,IND=index}{,KNUM=int})
2-KEYF(channelno{,ERR=lineref}{,END=lineref}{,IND=index})
3-KEYL(channelno{,ERR=lineref}{,END=lineref}{,IND=index})
4-KEYN(channelno{,ERR=lineref}{,END=lineref}{,IND=index})
5-KEYP(channelno{,ERR=lineref}{,END=lineref}{,IND=index})
\`

1-KEY() returns the key at the current file pointer position in the file.
2-KEYF() returns the first logical, or lowest, key in the file. For TCP/IP and UDP sockets, it returns the port signature "IP;port;hostname"
3-KEYL() returns the last logical, or greatest, key in the file.
4-KEYN() returns the key following the current key (next key).
5-KEYP() returns the key prior to the current key.
@/
KEY(param: int, ERR?:lineref, END?:lineref, param: int, param: int): string
KEYF(param: int, ERR?:lineref, END?:lineref, param: int): string
KEYL(param: int, ERR?:lineref, END?:lineref, param: int): string
KEYN(param: int, ERR?:lineref, END?:lineref, param: int): string
KEYP(param: int, ERR?:lineref, END?:lineref, param: int): string

/@@
\`KEYR(channelno{,ERR=lineref}{,DOM=lineref})\`

In BBj 15.00 and higher, the KEYR() function returns the most recent value passed in a KEY= option for any I/O verb on the specified file channel.
@/
KEYR(param: int, ERR?:lineref, DOM?:lineref): string

/@@
\`KGEN(str1,str2,int{,ERR=lineref})\`

The KGEN() function derives the value of a key contained within a record.
@/
KGEN(param: string, param: string, param: int, ERR?:lineref): string

/@@
\`LCHECKOUT(feature,version {,nagOnFailure} {,ERR?=lineref})\`

In PRO/5 Rev. 3.10 and higher, the LCHECKOUT function checks out one license of the specified feature. LCHECKOUT returns an integer handle.
The version is a string that contains a number that can be less than or equal to the version that is available. 
An attempt to checkout a license for a version that is greater than the version that is available will fail. 
In BBj 9.0 and higher, the optional numeric parameter nagOnFailure is available.
@/
LCHECKOUT(param: string, param: string, param: int, ERR?:lineref): string

/@@
\`LEN(string{,ERR?=lineref})\`

The LEN() function returns the length of string.
@/
LEN(param: string, ERR?:lineref): int

/@@
\`LEVENSHTEIN(str1,str2{,ERR?=lineref})\`

In BBj 18.00 and higher, the LEVENSHTEIN() function returns the Levenshtein distance between two strings.
@/
LEVENSHTEIN(param: string, param: string, ERR?:lineref): int

/@@
\`LINFO(handle,int,int{,ERR?=lineref})\`

In PRO/5 Rev. 3.10 and higher, the LINFO() function returns license information strings (FLEXlm/FLEXnet Application Licensing) int 
is an argument used by LINFO() to determine which string is desired.
@/
LINFO(param: string, param: int, param: int, ERR?:lineref): string

/@@
\`LOG(num{,precis}{,ERR=?lineref})\`

The LOG() function returns the common logarithm (base 10) of its argument.
@/
LOG(param: num, param: int, ERR?: lineref): void

/@@
\`LRC(string{,ERR=lineref})\`

The LRC() function returns a 1-byte string that is the result of exclusive ORing of all the bytes of its argument string. 
@/
LRC(param: string, ERR?:lineref): string

/@@
\`LST(stringA{,stringB}{,ERR=lineref})\`

The LST() function returns the listed form of a compiled PRO/5 command line.
LST() is for utility purposes only and should never be used in application programs.
@/
LST(param: string, param: string, ERR?:lineref): string

/@@
\`MASK(str1{,str2}{,ERR=lineref})\`

The MASK() function scans a string for a matching substring. 
@/
MASK(param: string, param: string, ERR?:lineref): int

/@@
\`MAX(num{,num...})\`

The MAX() function takes any number of numeric arguments and returns the value of the greatest argument.
@/
MAX(param: num): num

/@@
\`MENUINFO(sysgui,contextid{,ERR=lineref}{,END=lineref})\`

The MENUINFO() function retrieves a string that contains the structure of a menu.
@/
MENUINFO(param: sysgui, param: int, ERR?:lineref, END?:lineref): string

/@@
\`MIN(num{,num...})\`

The MIN() function takes any number of numeric arguments and returns the value of the least argument.
@/
MIN(param: num): num

/@@
\`MOD(numA,numB{,ERR=lineref})\`

The MOD() function returns the modulo (remainder) result using the following rules:
1-If numB is 0, numA is returned.
2-If numB is not 0, numA - numB*floor(numA/numB) is returned, where floor returns the largest integer less than or equal to its argument.
@/
MOD(param: num, param: num, ERR?:lineref) : num

/@@
\`MSGBOX(str1{,expr{,str2{,button1{,button2{,button3}}}}}{,MODE="options"}{,TIM=int}{,ERR=lineref})\`

The MSGBOX() function creates a message dialog box and returns a value that identifies the user-selected button.
@/
MSGBOX(str1: string, expr?: number, str2?: string, button1?: string, button2?: string, button3?: string, MODE?!: string, TIM?!: number, ERR?!: lineref): string

/@@
\`NEVAL(str{,ERR=lineref})\`

The NEVAL() function is intended to replace the use of EXECUTE for the purpose of evaluating numeric expressions in public programs.
@/
NEVAL(param: string, ERR?:lineref): num

/@@
\`NOT(string{,ERR=lineref})\`

The NOT() function toggles the bits of its string argument and returns the result.
@/
NOT(param: string, ERR?:lineref): string

/@@
\`NOTICE(sysgui,nfyid{,ERR=lineref})\`

The NOTICE() function uses the passed Notify ID and retrieves the Notice string from the SYSGUI channel.
@/
NOTICE(param: sysgui, param: int, ERR?:lineref): string

/@@
\`NOTICETPL(objtype,code{,ERR=lineref})\`

The NOTICETPL() function retrieves the template string definition for the specified Notice code and object for grid, INPUTE, INPUTN, list edit, list button, and tab controls.
objtype values:
-1:Windows operation system notice event,
1: top level window.
2: bordered child window.
7: borderless child window.
11: button control.
12: radio button control.
13: check box control.
14: horizontal scroll bar control.
15: vertical scroll bar control.
16: edit control.
17: static text control.
18: list box control.
19: list button control.
20: list edit control
21: group box control.
22: custom edit control.
100: menu item control.
101: checkable menu item.
102: status bar control.
103: tool button control.
104: INPUTE control.
105: INPUTN control.
106: tabl control.
107: grid control.

@/
NOTICETPL(param: int, param: int, ERR?:lineref): string

/@@
\`NUM(string{,ERR=lineref})\`

The NUM() function converts a string argument to a numeric equivalent.
@/
NUM(param: string, ERR?:lineref): num

/@@
\`PAD(str,len{,padtype{,padchr}}{,ERR=lineref})\`

The PAD() function pads a specified string.
@/
PAD(param: string, param: int, param: char, param: char, ERR?:lineref): string

/@@
\`PCK(num1,num2{,ERR=lineref})\`

The PCK() function has been added for compatibility with older Business BASICs that support these nonstandard capabilities.
@/
PCK(param: num, param: num, ERR?:lineref): string

/@@
\`PGM(int{,ERR=lineref})\`

The PGM() function returns the compiled form of a specified line from the current workspace program.
IF int is:
-1, then workspace program name is returned.
-2, then current program name is returned.
65535, then variable table for current workspace program is returned.
@/
PGM(param: int, ERR?:lineref): string

/@@
\`POS(stringA relation stringB {{,intA},intB})\`

The POS() function scans stringB for a substring with a specific relationship to stringA.
StringA: String sought, StringB: String to be scanned.
@/
POS(param: boolean, param: int, param: int): int

/@@
\`PROMPT(message{,default{,title{,expr}}}{,MODE="options"}{,TIM=int}{,ERR=lineref})\`

In BBj 22.13 and higher, the PROMPT() function prompts the user to type a value into a dialog box, then returns that string to the application. 
@/
PROMPT(param: string, param: string, param: string, param: expression, param: string, param: int, ERR?:lineref): string

/@@
\`PUB(int{,ERR=lineref})\`

The PUB() function returns strings describing the public programs currently in memory.
@/
PUB(param: int, ERR?:lineref): string

/@@
\`RESFIRST(res_handle{,ERR=lineref})\`

The RESFIRST() function retrieves the resource identifier and creates a string that provides resource ID information.
@/
RESFIRST(param: res_handle, ERR?:lineref): string

/@@
\`RESGET(handle,group,item{,ERR=lineref})\`

RESGET() returns a resource string from a BASIS resource file.
group:
1:window
2:menu
4:child window
5:image list
@/
RESGET(param: res_handle, param: int, param: int, ERR?:lineref): string

/@@
\`RESINFO(res_handle,resource{,ERR=lineref})\`

The RESINFO() function returns a formatted string containing information about the contents of a resource file.
@/
RESINFOR(param: res_handle, param: string, ERR?:lineref): string

/@@
\`RESNEXT(res_handle,res_id{,ERR=lineref})\`

The RESNEXT() function returns a string assigning the next valid resource in the resource file to the template defined by RESFIRST().
@/
RESNEXT(param: res_handle, param: int, ERR?:lineref): string

/@@
\`RESOPEN(filename{,ERR=lineref})\`

The RESOPEN() function opens a resource file and returns an integer handle.
@/
RESOPEN(param: string, ERR?:lineref): int

/@@
\`RND(int{,ERR=lineref})\`

The RND() function returns a sequence of random numbers. 
The sequence of values returned is determined by a "seed value." 
The same sequence results each time a given seed is used.
@/
RND(param: int, ERR?:lineref): int

/@@
\`ROUND(expr{,int}{,ERR=lineref})\`

The ROUND() function rounds a number to a specified number of decimal places or to the current precision value.
@/
ROUND(param: int, ERR?:lineref): int

/@@
\`SCALL(string{,ERR=lineref})\`

The SCALL() function is used in run mode to execute operating system commands in the PRO/5 environment.
@/
SCALL(param: string, ERR?:lineref): void

/@@
\`SENDMSG(sysgui,id,function,int,string{,context{,ERR=lineref}})\`

The SENDMSG() function sends messages to windows and controls. The meaning of the returned string depends on the type of object the id parameter refers to and the message being sent.
@/
SENDMSG(param: sysgui, param: int, param: int, param: int, param: string, param: int, ERR?:lineref): string

/@@
\`SERVERENV(str{,IND=int}{,ERR=lineref})\`

In BBj 4.0 and higher, the SERVERENV() function returns the value of the specified operating system's environment variable from the server side of a thin client session.
@/
SERVERENV(param: string, param: int, ERR?:lineref): string

/@@
\`SEVAL(str{,ERR=lineref})\`

The SEVAL() function is intended to replace the use of EXECUTE for evaluating string expressions in public programs. 
SEVAL() returns the value from the string expression in str after compiling and executing the str. 
@/
SEVAL(param: string, ERR?:lineref): string

/@@
\`SGN(num{,ERR=lineref})\`

The SGN() function returns a 1, 0, or -1 depending on whether its numeric argument is positive, zero, or negative respectively.
@/
SNG(param: int, ERR?:lineref): int

/@@
\`SIN(num{,precis}{,ERR=lineref})\`

The SIN() function returns the sine of an argument.
@/
SIN(param: num, ERR?:lineref): num

/@@
\`SQLERR(sqlchan{,ERR=lineref})\`

The SQLERR() function returns the text for the most recent error returned by the SQL command being executed.
@/
SQLERR(param: sqlchannel, ERR?:lineref): void

/@@
\`SQLFETCH(sqlchan{,IND=1}{,END=lineref}{,ERR=lineref})\`

The SQLFETCH() function returns the next element in the result set from the execution of the SQL command on sqlchan.
@/
SQLFETCH(param: sqlchannel, param: int, END?:lineref, ERR?:lineref): any

/@@
\`SQLLIST(arg{,ERR=lineref})\`

The SQLLIST() function returns the names of the available databases in the SQL system, with each item terminated by a linefeed.
@/
SQLLIST(param: arg, ERR?:lineref): string

/@@
\`SQLTABLES(sqlchan{,ERR=lineref})\`

The SQLTABLES() function retrieves a list of available tables from a database with each item terminated by a linefeed.
@/
SQLTABLES(param: sqlchannel, ERR?:lineref): string

/@@
\`SQLTMPL(sqlchan{,IND=1}{,ERR=lineref})\`

The SQLTMPL() function returns the template used to access the data returned in an SQLFETCH() operation. 
The template returned is dependent on the SQL command given by the SQLPREP verb.
@/
SQLTMPL(param: sqlchannel, param: int, ERR?:lineref): template

/@@
\`SQR(num{,ERR=lineref})\`

The SQR() function returns the square root of its numeric argument. The argument may be any positive number.
@/
SQL(param: num, ERR?:lineref): num

/@@
\`SSORT(str1,int1{,str2,int2}{,ERR=lineref})\`

The SSORT() function sorts str1 using int1 as the record size and optionally using the key described using str2 and int2 as a key descriptor pair. 
@/
SSORT(param: string, param: int, param: string, param: int, ERR?:lineref): void

/@@
\`
SSZ(string{,ERR=lineref})
SSZ(int{,ERR=lineref})
\`

The SSZ() function returns the constant 512 and is included only for syntax compatibility with older versions of Business BASIC. string or int must refer to a valid disk drive.
@/
SSZ(param: string, ERR?:linefeed): int
SSZ(param: int, ERR?:linefeed): int

/@@
\`STBL(str1{,str2}{,ERR=lineref})\`

The STBL() function allows the program to maintain strings that are independent of the workspace and cannot be destroyed by CLEAR, BEGIN, or START. 
@/
STBL(param: string, param: string, ERR?:lineref): void


/@@
\`SWAP(str1{,str2}{,ERR=lineref})\`

The SWAP() function is used for exchanging data with other software applications that may be using a native mode of data representation on a particular machine.
@/
SWAP(param: string, param: string, ERR?:lineref): void

/@@
\`
TBL(string,string{,ERR=lineref})
TBL(string,TBL=lineref{,ERR=lineref})
\`

The TBL() function performs the string translation described in the TABLE verb. The first argument is the string to translate. 
The second argument, which specifies the translation table, may be either another string or a TBL=lineref reference. 
If the table is in a string, the string must be at least one byte long. If TBL= is used, it must refer to a TABLE statement.
@/
TBL(param: string, table: string, ERR?:lineref): void
TBL(param: string, TBL?:lineref, ERR?:lineref): void

/@@
\`TCB(int{,ERR=lineref})\`

The TCB() function returns information on the current state of the application.
@/
TCB(param: int, ERR?:lineref): string

/@@
\`TOPEN(level{,MODE="READONLY"){,ERR=lineref})\`

The TOPEN() function starts a transaction and returns an integer transaction ID.
@/
TOPEN(param: int, mode: string, ERR?:lineref): int

/@@
\`TSK(int{,ERR=lineref})\`

The TSK() function returns strings corresponding to the ALIAS entries in the current PRO/5 configuration. 
TSK(0) returns the first ALIAS, TSK(1) the second, and so on.
@/
TSK(param: int, ERR?:lineref): string

/@@
\`UPK(str{,ERR=lineref})\`

The UPK() function returns a numeric result from the packed data in str. It is assumed that str was created by the PCK() function.
@/
UPK(param: string, ERR?:lineref): num

/@@
\`WINFIRST(sysgui{,ERR=lineref})\`

The WINFIRST() function returns a window context ID that can be used by the WININFO() function to obtain information about the referenced window.
@/
WINFIRST(param: sysgui, ERR?:lineref): int

/@@
\`WININFO(sysgui,contextid{,ERR=lineref}{,END=lineref})\`

The WININFO() function returns a string that contains information about the contents of a SYSGUI window.
@/
WININFOR(param: sysgui, ERR?:lineref): string

/@@
\`WINNEXT(sysgui,context{,ERR=lineref})\`

The WINNEXT() function returns the next context ID of each of the top-level windows in sequence by way of a templated 
string obtained either from the WINFIRST() function or from a previous use of the WINNEXT() function.
@/
WINNEXT(param: sysgui, param: int, ERR?:lineref): int

/@@
\`XFID(channelno{,ERR=lineref})\`

The XFID() function returns a string describing the attributes of the file currently OPENed on channelno. 
If channelno was OPENed with an alias and resulted in opening a BBj device, XFID() returns only the alias name.
@/
XFID(param: int, ERR?:lineref): string

/@@
\`XFIN(channelno{,ERR=lineref})\`

The XFIN() function returns an 8-byte file length.
@/
XFIN(param: int, ERR?:lineref): double

/@@
\`XKGEN(str1,str2,int{,ERR=lineref})\`

In BBj 3.0 and higher, the XKGEN() function derives the value of a key contained within a record.
@/
XKGEN(param: string, param: string, ERR?:lineref): string

/@@
\`XOR(stringA,stringB{,ERR=lineref})\`

The XOR() function will exclusive OR the bits of the two string arguments and return the result.
@/
XOR(param: string, param: string, ERR?:lineref): int

/@@
\`XSSORT(str1,int1{,str2,int2}{,ERR=lineref})\`

In BBj 3.0 and higher, the XSSORT() function sorts str1 using int1 as the record size and 
optionally using the key described using str2 and int2 as a key descriptor pair. 
The key descriptor has the length of the key to sort. The string returned by this function is str1, sorted.
@/
XSSORT(param: string, param: int, param: string, param: string, ERR?:lineref): void
