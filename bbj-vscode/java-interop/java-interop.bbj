use com.basis.api.admin.BBjAdminAppDeploymentApplication
use com.basis.api.admin.BBjAdminAppDeploymentConfiguration
use com.basis.api.admin.BBjAdminBase
use com.basis.api.admin.BBjAdminException
use com.basis.api.admin.BBjAdminFactory
use com.basis.api.admin.BBjAdminTaskGroup
use com.basis.api.admin.BBjAdminTask
use com.basis.api.admin.BBjAdminBBjTask
use java.util.ArrayList

if  rev >= "REV 25" then release

if pos("-CPvscode"=str(BBjAPI().getConfig().getCurrentCommandLineObject()))>0 then
    goto service
fi

args! = BBjAPI().getConfig().getCurrentCommandLineObject().getProgramArgs()

if pos("autorun" = str(args!))>0 then
    System.out.println("received autorun without correct classpath")
    cmd$="bbj -CPvscode -tIO -WD"""+dsk("")+dir("")+""" """+pgm(-1)+"""&"
    a=scall(cmd$)
    release
fi

admin$="admin"
pw$="admin123"
if argc=3 then
    admin$=argv(1)
    pw$=argv(2)
fi

cpdir! = dsk("")+dir("")+"lib/*"
api! = BBjAdminFactory.getBBjAdmin(admin$,pw$)

cpEntries! = new ArrayList()
cpEntries!.add("(bbj_default)")
cpEntries!.add(cpdir!)

System.out.println("updating vscode classpath with "+str(cpEntries!))

api!.setClasspath("vscode", null())
api!.commit()

api!.setClasspath("vscode", cpEntries!)
api!.commit()

rem we need to probably hash the working directory and make sure that this program always runs with different versions of the plugin
r$ = BBjAPI().getGlobalNamespace().getValue("vscode-interop",err=*next)
if r$="running" then
    System.out.println("vscode interop already running. In case of an extension update you may need to restart the service.")
    release
fi

cmd$="bbj -CPvscode -tIO -WD"""+dsk("")+dir("")+""" """+pgm(-1)+"""&"
a=scall(cmd$)

newtask=0

taskGroup! = api!.getTaskQueue().getTaskGroup("vscode",err=*next)

if taskGroup! = null() then
    taskGroup! = api!.newTaskGroup()
    taskGroup!.setBoolean(BBjAdminTaskGroup.AUTORUN, 1)
    taskGroup!.setString(BBjAdminTaskGroup.NAME, "vscode")
    task! = taskGroup!.newTask(BBjAdminTask.TaskType.BBJ_PROGRAM)
    newtask=1
ELSE
    task! = taskGroup!.getTasks().get(0,err=*next)
    if task! = null() then
        task! = taskGroup!.newTask(BBjAdminTask.TaskType.BBJ_PROGRAM)
        newtask=1
    fi
fi

task!.setString(BBjAdminBBjTask.PROGRAM, pgm(-1))
task!.setString(BBjAdminBBjTask.WORKING_DIR, dsk("")+dir(""))
task!.setString(BBjAdminBBjTask.TERMINAL, "IO")
task!.setString(BBjAdminBBjTask.CLASSPATH,"vscode")
task!.setString(BBjAdminBBjTask.ARGUMENTS,"autorun")


if newtask then
    taskGroup!.getTasks().add(task!)
FI

taskGroup!.commit()


RELEASE

service:

seterr startup_err

Class.forName("bbj.interop.SocketServiceApp")
new bbj.interop.SocketServiceApp().start()
System.out.println("vscode java interop service started")
BBjAPI().getGlobalNamespace().setValue("vscode-interop","running")
RELEASE

startup_err:
    e$=errmes(-1)
    A=MSGBOX(e$,0,"Error in VSCODE Java Service")
release

isrunning:
    System.out.println("vscode java interop service already running")
    RELEASE
