/******************************************************************************
 * Copyright 2023 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/

import {
    createDefaultModule, createDefaultSharedModule, DeepPartial, DefaultSharedModuleContext, inject,
    LangiumSharedServices, Module
} from 'langium';
import { BBjGeneratedModule, BBjGeneratedSharedModule } from './generated/module';
import { registerValidationChecks } from './bbj-validator';
import { BBjNodeWorkspaceManager } from './bbj-node-ws-manager';
import { BBjDocumentBuilder } from './bbj-document-builder';
import { BBjIndexManager } from './bbj-index-manager';
import { BBjModule, BBjServices } from './bbj-module';

export const BBjSharedModule: Module<LangiumSharedServices, DeepPartial<LangiumSharedServices>> = {
    workspace: {
        DocumentBuilder: (services: LangiumSharedServices) => new BBjDocumentBuilder(services),
        WorkspaceManager: (services: LangiumSharedServices) => new BBjNodeWorkspaceManager(services),
        IndexManager: (services: LangiumSharedServices) => new BBjIndexManager(services)
    },
}

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createBBjServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    BBj: BBjServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        BBjGeneratedSharedModule,
        BBjSharedModule
    );
    const BBj = inject(
        createDefaultModule({ shared }),
        BBjGeneratedModule,
        BBjModule
    );
    shared.ServiceRegistry.register(BBj);
    registerValidationChecks(BBj);
    return { shared, BBj };
}
